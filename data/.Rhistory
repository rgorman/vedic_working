require(tidyverse)
require(udpipe)
files.v <- dir(pattern = ".conllu")
str_detect(files.v, "_parsed")
which(str_detect(files.v, "_parsed") == TRUE)
drops.v <-  which(str_detect(files.v, "_parsed") == TRUE)
files.v <- files.v[-drops.v]
files.v[1]
files.v[1] %>% str_extract("ṚV")
files.v[1] %>% str_extract("ṚV.*")
files.v[1] %>% str_extract("ṚV.*") %>%
gsub("-.*", "")
files.v[1] %>% str_extract("ṚV.*") %>%
gsub("-.*", "", .)
files.v[1] %>% str_extract("ṚV.*") %>%
gsub("-.*", "", .) %>%
gsub(", ", "_", .)
files.v[1] %>% str_extract("ṚV.*") %>%
gsub("-.*", "", .) %>%
gsub(", ", "_", .) %>%
gsub("Ṛ", "R", .)
BookAndHymn.v <- files.v %>% str_extract("ṚV.*") %>%
gsub("-.*", "", .) %>%
gsub(", ", "_", .) %>%
gsub("Ṛ", "R", .)
BookAndHymn.v
Book.v <- BookAndHymn.v %>%
gsub("^[^-]*-[^-]*", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^[^-]", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^([^_]*-[^_]*).*", "", .)
BookAndHymn.v
Book.v <- BookAndHymn.v %>%
gsub("^([^_]*-", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^([^_]", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^([^_])", "", .)
Book.v
Book.v <- BookAndHymn.v %>%
gsub("^([^_])*", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^([^_])*_", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^([^_])*_[^_]", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^([^_]*_[^_])", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^([^_]*_[^_]*)", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^([^_])", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^(RV)", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^(RV_)", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^(RV_)*", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^([RV_]*)", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^([RV_]*_)", "", .)
Book.v <- BookAndHymn.v %>%
gsub("^([RV_*_])", "", .)
Book.v <- BookAndHymn.v %>%
gsub("RV_", "", .)
Book.v <- BookAndHymn.v %>%
gsub("RV_", "", .) %>%
gsub("_.*", ", .")
Book.v <- BookAndHymn.v %>%
gsub("RV_", "", .) %>%
gsub("_.*", "", .)
Book.v
i <- 1
working.df <- udpipe_read_conllu(files.v[i])
View(working.df)
working.df <- add_column(working.df, Book_and_Hymn = BookAndHymn.v)
working.df <- add_column(working.df, Book_and_Hymn = BookAndHymn.v[i])
working.df <- udpipe_read_conllu(files.v[i])
working.df <- add_column(working.df, Book_and_Hymn = BookAndHymn.v[i])
View(working.df)
working.df <- udpipe_read_conllu(files.v[i])
working.df <- add_column(working.df, Book_and_Hymn = BookAndHymn.v[i], .before = TRUE)
View(working.df)
working.df <- add_column(working.df, Book_Id = Book.v[i], .before = TRUE)
working.df <- udpipe_read_conllu(files.v[1])
z <- working.df$feats %>%
str_split(., "\\|", simplify = TRUE) # make a matrix of each name-value pair in the "feats" col of the input (e.g., "Case=Nom")
m <- ncol(z) # for loop: number of cols in z
View(z)
morphs.v <- NULL # vector to store results of loop
for (j in seq_len(m)) { # loop through cols of z
a <- z[, j] %>%
str_split(., "=") %>% # split name from value for each pair
sapply(., magrittr::extract, 1) # extract and keep only names, not values
morphs.v <- c(morphs.v, a) # put results in vector
b <- z[, j] %>%
str_split(., "=") %>% # split name from value for each pair
sapply(., magrittr::extract, 2) # extract and keep only vales, not names
}
j <- 1
z[, j] %>%
str_split(., "=")
z[, j] %>%
str_split(., "=") %>% # split name from value for each pair
sapply(., magrittr::extract, 2)
morphs.v <-  unique(morphs.v) # remove duplicates
morphs.v
morphs.v <- morphs.v[- which(morphs.v == "")] # remove empty categories
morphs.v[which(is.na(morphs.v))] <- "Not_App" # rename NA: this is not an acceptable name for a col
self_names.v <- paste0("self_", morphs.v) # vector of col names for target word
parent_names_v <- paste0("parent_", morphs.v) # vector of col names for parent of target
file.path(".", "data", files.v[i])
file.path(".", "data", BookAndHymn.v[i])
FileName.v <- file.path(".", "data", BookAndHymn.v[i], "RDS")
FileName.v
FileName.v <- paste0( BookAndHymn.v[i], ".RDS")
FileAndPath.v <-  file.path(".", "data", FileName.v)
FileAndPath.v
saveRDS(working.df, FileAndPath.v)
######### add metadata, convert to df, record colnames for morphs
holder.l <- vector(mode = "list", length(files.v))
print(paste("completed file", i))
for (i in seq_along(files.v)) {
working.df <- udpipe_read_conllu(files.v[i])
working.df <- add_column(working.df, Book_and_Hymn = BookAndHymn.v[i], .before = TRUE)
working.df <- add_column(working.df, Book_Id = Book.v[i], .before = TRUE)
z <- working.df$feats %>%
str_split(., "\\|", simplify = TRUE) # make a matrix of each name-value pair in the "feats" col of the input (e.g., "Case=Nom")
m <- ncol(z) # for loop: number of cols in z
morphs.v <- NULL # vector to store results of loop
for (j in seq_len(m)) { # loop through cols of z
a <- z[, j] %>%
str_split(., "=") %>% # split name from value for each pair
sapply(., magrittr::extract, 1) # extract and keep only names, not values
morphs.v <- c(morphs.v, a) # put results in vector
}
morphs.v <-  unique(morphs.v) # remove duplicates
FileName.v <- paste0( BookAndHymn.v[i], ".RDS")
FileAndPath.v <-  file.path(".", "data", FileName.v)
holder.l[[i]] <- morphs.v
saveRDS(working.df, FileAndPath.v)
print(paste("completed file", i))
}
holder.l
NamesForMorph.v <- unlist(holder.l)
NamesForMorph.v <- unlist(holder.l) %>% unique()
NamesForMorph.v
NamesForMorph.v <- NamesForMorph.v[- which(NamesForMorph.v == "")] # remove empty categories
NamesForMorph.v[which(is.na(NamesForMorph.v))] <- "Not_App" # rename NA: this is not an acceptable name for a col
NamesForMorph.v
View(working.df)
setwd("~/Github/vedic/Hellwig/sanskrit/dcs/data/conllu/files/Ṛgveda/data")
files.v <- dir(pattern = ".RDS")
i <- 1
working.df <- readRDS(files.v[i]) # load file from dir; file should be data frame
x <- working.df$sentence_id %>%
unique() # vector with id number of each sentence
parent_holder.v <- NULL # vector to store result of loop
dd_holder.v <- NULL # vector to store result of loop
n <- 1
a <- working.df %>%
filter(sentence_id == x[n]) # df with rows sentence by sentence
b <- as.numeric(a$head_token_id) # vector with head_token_id for each row in sentence
b[which(b == 0)] <- NA # eliminate any head_token_id with value 0
dd_holder.v <- c(dd_holder.v, (a$token_id %>%
as.numeric() ) - b )
parent_holder.v <- c(parent_holder.v,  a$term_id[b] %>%
as.numeric() ) # add parent term_token_id values for current sentence to vector
View(a)
parent_holder.v <- c(parent_holder.v,  a$token_id[b] %>%
as.numeric() ) # add parent term_token_id values for current sentence to vector
parent_holder.v
z <- working.df$misc %>%
str_split(., "\\|", simplify = TRUE) # make a matrix of each name-value pair in the "feats" col of the input (e.g., "Case=Nom")
m <- ncol(z) # for loop: number of cols in z
misc.v <- NULL # vector to store results of loop
a <- z[, j] %>%
str_split(., "=") %>% # split name from value for each pair
sapply(., magrittr::extract, 1) # extract and keep only names, not values
a
working.df$misc
z
n <- 1
a <- working.df %>%
filter(sentence_id == x[n]) # df with rows sentence by sentence
b <- as.numeric(a$head_token_id) # vector with head_token_id for each row in sentence
b[which(b == 0)] <- NA # eliminate any head_token_id with value 0
dd_holder.v <- c(dd_holder.v, (a$token_id %>%
as.numeric() ) - b )
View(a)
dd_holder.v <- NULL # vector to store result of loop
for (n in seq_along(x)) { # loop to create vector of parent term_ids
a <- working.df %>%
filter(sentence_id == x[n]) # df with rows sentence by sentence
b <- as.numeric(a$head_token_id) # vector with head_token_id for each row in sentence
b[which(b == 0)] <- NA # eliminate any head_token_id with value 0
dd_holder.v <- c(dd_holder.v, (a$token_id %>%
as.numeric() ) - b )
}
dd_holder.v
working.df %>%
mutate(self_POS = upos)
working.df <- working.df %>%
mutate(self_POS = upos) # create new col for part of speech of target word (marked with prefix "self")
working.df <- working.df %>%
mutate(self_rel = dep_rel) # ditto for the dependency relation
working.df <- working.df %>%
mutate(self_dd = dd_holder.v) # ditto for dependency distance
working.df[which(working.df$self_dd > 0), "self_arc_dir"] <- "parent_precedes" # ditto for arc direction
working.df[which(working.df$self_dd < 0), "self_arc_dir"] <- "parent_follows"
self_names.v
working.df[, self_names.v] <- NA # add "self-" cols for morphology
z <- working.df$feats %>%
str_split(., "\\|", simplify = TRUE) # make a matrix of each name-value pair in the "feats" col of the input (e.g., "Case=Nom")
z[which(z == "")] <- "Not_App"
z[is.na(z)] <- "Not_App"
for (j in seq_len(ncol(z))) {
a <- apply(z[, j, drop=F], 1,   function(x) sub(".*=", "", x)    )
b <- apply(z[, j, drop=F], 1,   function(x) sub("=.*", "", x)    )
b <- paste0("self_", b)
for (n in seq_along(a)) {
working.df[n, b[n]] <- a[n]
}
}
self_names.v
NamesForMorph.v
self_names.v <- paste0("self_" NamesForMorph.v)
self_names.v <- paste0("self_", NamesForMorph.v)
working.df <- readRDS(files.v[i]) # load file from dir; file should be data frame
x <- working.df$sentence_id %>%
unique() # vector with id number of each sentence
dd_holder.v <- NULL # vector to store result of loop
for (n in seq_along(x)) { # loop to create vector of parent term_ids
a <- working.df %>%
filter(sentence_id == x[n]) # df with rows sentence by sentence
b <- as.numeric(a$head_token_id) # vector with head_token_id for each row in sentence
b[which(b == 0)] <- NA # eliminate any head_token_id with value 0
dd_holder.v <- c(dd_holder.v, (a$token_id %>%
as.numeric() ) - b )
}
dd_holder.v
working.df <- working.df %>%
mutate(self_POS = upos) # create new col for part of speech of target word (marked with prefix "self")
working.df <- working.df %>%
mutate(self_rel = dep_rel) # ditto for the dependency relation
working.df <- working.df %>%
mutate(self_dd = dd_holder.v) # ditto for dependency distance
working.df[which(working.df$self_dd > 0), "self_arc_dir"] <- "parent_precedes" # ditto for arc direction
working.df[which(working.df$self_dd < 0), "self_arc_dir"] <- "parent_follows"
working.df[, self_names.v] <- NA # add "self-" cols for morphology
z <- working.df$feats %>%
str_split(., "\\|", simplify = TRUE) # make a matrix of each name-value pair in the "feats" col of the input (e.g., "Case=Nom")
z[which(z == "")] <- "Not_App"
z[is.na(z)] <- "Not_App"
for (j in seq_len(ncol(z))) {
a <- apply(z[, j, drop=F], 1,   function(x) sub(".*=", "", x)    )
b <- apply(z[, j, drop=F], 1,   function(x) sub("=.*", "", x)    )
b <- paste0("self_", b)
for (n in seq_along(a)) {
working.df[n, b[n]] <- a[n]
}
}
print(paste0("completed file ", files.v[i]))
for (i in seq_along(files.v)) { # loop to make separate col for each category of morpho-syntactic data
working.df <- readRDS(files.v[i]) # load file from dir; file should be data frame
# create col with term_id of the parent of each target token
# ditto for dependency distance of each target token
x <- working.df$sentence_id %>%
unique() # vector with id number of each sentence
dd_holder.v <- NULL # vector to store result of loop
for (n in seq_along(x)) { # loop to create vector of parent term_ids
a <- working.df %>%
filter(sentence_id == x[n]) # df with rows sentence by sentence
b <- as.numeric(a$head_token_id) # vector with head_token_id for each row in sentence
b[which(b == 0)] <- NA # eliminate any head_token_id with value 0
dd_holder.v <- c(dd_holder.v, (a$token_id %>%
as.numeric() ) - b )
}
working.df <- working.df %>%
mutate(self_POS = upos) # create new col for part of speech of target word (marked with prefix "self")
working.df <- working.df %>%
mutate(self_rel = dep_rel) # ditto for the dependency relation
working.df <- working.df %>%
mutate(self_dd = dd_holder.v) # ditto for dependency distance
working.df[which(working.df$self_dd > 0), "self_arc_dir"] <- "parent_precedes" # ditto for arc direction
working.df[which(working.df$self_dd < 0), "self_arc_dir"] <- "parent_follows"
working.df[, self_names.v] <- NA # add "self-" cols for morphology
z <- working.df$feats %>%
str_split(., "\\|", simplify = TRUE) # make a matrix of each name-value pair in the "feats" col of the input (e.g., "Case=Nom")
z[which(z == "")] <- "Not_App"
z[is.na(z)] <- "Not_App"
for (j in seq_len(ncol(z))) {
a <- apply(z[, j, drop=F], 1,   function(x) sub(".*=", "", x)    )
b <- apply(z[, j, drop=F], 1,   function(x) sub("=.*", "", x)    )
b <- paste0("self_", b)
for (n in seq_along(a)) {
working.df[n, b[n]] <- a[n]
}
}
fp <- file.path("parsed_expanded", files.v[i]) # create file path for saving
saveRDS(working.df, files.v[i])
print(paste0("completed file ", files.v[i]))
}
files.v
NewName.v <- files.v[i]
NewName.v <- files.v[i] %>%
gsub("_[1-9]_", "", .)
NewName.v <- files.v[i] %>%
gsub("_[1-9]_", "0$", .)
NewName.v <- files.v[i] %>%
gsub("_[1-9]_", "01", .)
NewName.v <- files.v[i] %>%
gsub("_[1]_", "_01_", .)
NewName.v
n <- 1
NewBook.v <- paste0("_", n, "_")
OldBook.v <- paste0("_", n, "_")
NewBook.v <- paste0("_", "0", n, "_")
NewName.v <- files.v[i] %>%
gsub(OldBook.v, NewBook.v, .)
NewBook.v
files.v[i] %>%
gsub(OldBook.v, NewBook.v, .)
OldBook.v
NewBook.v
for (n in 1:9) {
OldBook.v <- paste0("_", n, "_")
NewBook.v <- paste0("_", "0", n, "_")
NewName.v <- files.v[i] %>%
gsub(OldBook.v, NewBook.v, .)
}
NewName.v
holder.l <- vector(mode = "list", length(files.v))
holder.l <- vector(mode = "list", length(files.v))
for (i in seq_along(files.v)) {
# x <- readRDS(files.v[i])
for (n in 1:9) {
OldBook.v <- paste0("_", n, "_")
NewBook.v <- paste0("_", "0", n, "_")
OldHymn.v <- paste0("_", n, ".RDS")
NewHymn.v <- paste0("_", "0", n, ".RDS")
NewName.v <- files.v[i] %>%
gsub(OldBook.v, NewBook.v, .)
NewName.v <- files.v[i] %>%
gsub(OldHymn.v, NewHymn.v, .)
}
holder.l[[i]] NewName.v
for (i in seq_along(files.v)) {
# x <- readRDS(files.v[i])
for (n in 1:9) {
OldBook.v <- paste0("_", n, "_")
NewBook.v <- paste0("_", "0", n, "_")
OldHymn.v <- paste0("_", n, ".RDS")
NewHymn.v <- paste0("_", "0", n, ".RDS")
NewName.v <- files.v[i] %>%
gsub(OldBook.v, NewBook.v, .)
NewName.v <- files.v[i] %>%
gsub(OldHymn.v, NewHymn.v, .)
}
holder.l[[i]] <-  NewName.v
}
holder.l
OldBook.v
NewBook.v
OldHymn.v
NewHymn.v
i <- 1000
files.v[i]
files.v[i] %>%
gsub(OldBook.v, NewBook.v, .)
files.v[i] %>%
gsub(OldHymn.v, NewHymn.v, .)
NewName.v %>%
gsub(OldHymn.v, NewHymn.v, .)
NewName.v <- files.v[i] %>%
gsub(OldBook.v, NewBook.v, .)
NewName.v %>%
gsub(OldHymn.v, NewHymn.v, .)
holder.l <- vector(mode = "list", length(files.v))
for (i in seq_along(files.v)) {
# x <- readRDS(files.v[i])
for (n in 1:9) {
OldBook.v <- paste0("_", n, "_")
NewBook.v <- paste0("_", "0", n, "_")
OldHymn.v <- paste0("_", n, ".RDS")
NewHymn.v <- paste0("_", "0", n, ".RDS")
NewName.v <- files.v[i] %>%
gsub(OldBook.v, NewBook.v, .)
NewName.v <- NewName.v %>%
gsub(OldHymn.v, NewHymn.v, .)
}
holder.l[[i]] <-  NewName.v
}
holder.l
files.v[1]
i <- 1
n <- 1
OldBook.v <- paste0("_", n, "_")
NewBook.v <- paste0("_", "0", n, "_")
OldHymn.v <- paste0("_", n, ".RDS")
NewHymn.v <- paste0("_", "0", n, ".RDS")
files.v[i] %>%
gsub(OldBook.v, NewBook.v, .)
NewName.v <- files.v[i] %>%
gsub(OldBook.v, NewBook.v, .)
NewName.v %>%
gsub(OldHymn.v, NewHymn.v, .)
NewName.v <- NewName.v %>%
gsub(OldHymn.v, NewHymn.v, .)
NewName.v
for (n in 1:9) {
OldBook.v <- paste0("_", n, "_")
NewBook.v <- paste0("_", "0", n, "_")
OldHymn.v <- paste0("_", n, ".RDS")
NewHymn.v <- paste0("_", "0", n, ".RDS")
NewName.v <- files.v[i] %>%
gsub(OldBook.v, NewBook.v, .)
NewName.v <- NewName.v %>%
gsub(OldHymn.v, NewHymn.v, .)
}
NewName.v
n <- 1
OldBook.v <- paste0("_", n, "_")
NewBook.v <- paste0("_", "0", n, "_")
OldHymn.v <- paste0("_", n, ".RDS")
NewHymn.v <- paste0("_", "0", n, ".RDS")
NewName.v <- files.v[i] %>%
gsub(OldBook.v, NewBook.v, .)
NewName.v <- NewName.v %>%
gsub(OldHymn.v, NewHymn.v, .)
NewName.v
n <- 2
OldBook.v <- paste0("_", n, "_")
NewBook.v <- paste0("_", "0", n, "_")
OldHymn.v <- paste0("_", n, ".RDS")
NewHymn.v <- paste0("_", "0", n, ".RDS")
files.v[i] %>%
gsub(OldBook.v, NewBook.v, .)
n <- 1
files.v2 <- files.v
which(str_detect(files.v2, OldBook.v))
files2.v[which(str_detect(files.v2, OldBook.v))]
files.v2[which(str_detect(files.v2, OldBook.v))]
files.v2[which(str_detect(files.v2, OldBook.v))] %>%
gsub(OldBook.v, NewBook.v, .)
files.v2[which(str_detect(files.v2, OldHymn.v))]
NewHymn.v <- paste0("_", "0", n, ".RDS")
n <- 1
OldBook.v <- paste0("_", n, "_")
NewBook.v <- paste0("_", "0", n, "_")
OldHymn.v <- paste0("_", n, ".RDS")
NewHymn.v <- paste0("_", "0", n, ".RDS")
files.v2[which(str_detect(files.v2, OldBook.v))]
files.v2[which(str_detect(files.v2, OldBook.v))] %>%
gsub(OldBook.v, NewBook.v, .)
files.v2[which(str_detect(files.v2, OldHymn.v))]
files.v2[which(str_detect(files.v2, OldHymn.v))] %>%
gsub(OldHymn.v, NewHymn.v, .)
for (n in 1:9) {
OldBook.v <- paste0("_", n, "_")
NewBook.v <- paste0("_", "0", n, "_")
OldHymn.v <- paste0("_", n, ".RDS")
NewHymn.v <- paste0("_", "0", n, ".RDS")
files.v2 <- files.v2[which(str_detect(files.v2, OldBook.v))] %>%
gsub(OldBook.v, NewBook.v, .)
files.v2 <- files.v2[which(str_detect(files.v2, OldHymn.v))] %>%
gsub(OldHymn.v, NewHymn.v, .)
}
files.v2
NewHymn.v
files.v2[which(str_detect(files.v2, OldBook.v))]
files.v2 <- files.v
n <- 1
OldBook.v <- paste0("_", n, "_")
NewBook.v <- paste0("_", "0", n, "_")
OldHymn.v <- paste0("_", n, ".RDS")
NewHymn.v <- paste0("_", "0", n, ".RDS")
files.v2 <- files.v2[which(str_detect(files.v2, OldBook.v))] %>%
gsub(OldBook.v, NewBook.v, .)
files.v2 <- files.v2[which(str_detect(files.v2, OldHymn.v))] %>%
gsub(OldHymn.v, NewHymn.v, .)
files.v2 <- files.v
n <-1
files.v2[which(str_detect(files.v2, OldBook.v))] %>%
gsub(OldBook.v, NewBook.v, .)
files.v2[which(str_detect(files.v2, OldBook.v))] <- files.v2[which(str_detect(files.v2, OldBook.v))] %>%
gsub(OldBook.v, NewBook.v, .)
for (n in 1:9) {
OldBook.v <- paste0("_", n, "_")
NewBook.v <- paste0("_", "0", n, "_")
OldHymn.v <- paste0("_", n, ".RDS")
NewHymn.v <- paste0("_", "0", n, ".RDS")
files.v2[which(str_detect(files.v2, OldBook.v))] <- files.v2[which(str_detect(files.v2, OldBook.v))] %>%
gsub(OldBook.v, NewBook.v, .)
files.v2[which(str_detect(files.v2, OldHymn.v))] <- files.v2[which(str_detect(files.v2, OldHymn.v))] %>%
gsub(OldHymn.v, NewHymn.v, .)
}
files.v2
i <- 1
file.path(".", "renamed", files.v2[i])
x <- readRDS(files.v[i])
fp <- file.path(".", "renumbered", files.v2[i])
saveRDS(x, file = fp)
print(paste0("finished", i))
print(paste0("finished ", i))
for (i in seq_along(files.v)) {
x <- readRDS(files.v[i])
fp <- file.path(".", "renumbered", files.v2[i])
saveRDS(x, file = fp)
print(paste0("finished ", i))
}
