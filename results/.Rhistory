filter(self_case == "dative") %>%
group_by(self_gender)
Rom.df %>%
filter(self_case == "dative") %>%
group_by(self_gender) %>%
summarise(ct = n())
x <- 20:40
20/x
30/33
names(x) <- x
20/x
25/40
25*(1/.625)
seq(1142, )
seq(1142, length.out = 141 )
seq(1283, length.out = 141 )
seq(1424, length.out = 141 )
seq(2001, length.out = 83 )
seq(2084, length.out = 83 )
seq(5223, length.out = 111 )
seq(5139, length.out = 138 )
seq(5277, length.out = 138 )
5277+138
140*20
seq(1103, length.out = 102 )
seq(1103, length.out = 100 )
seq(2085, length.out = 80 )
seq(2165, length.out = 80 )
seq(2245, length.out = 80 )
seq(3088, length.out = 90 )
seq(3178, length.out = 89 )
seq(5001, length.out = 135 )
seq(5136, length.out = 140 )
seq(5276, length.out = 140 )
seq(5416, length.out = 140 )
seq(5416, length.out = 135 )
seq(6001, length.out = 135 )
seq(6136, length.out = 140 )
seq(6276, length.out = 140 )
seq(6416, length.out = 140 )
seq(8084, length.out = 80 )
seq(1001, length.out = 101 )
seq(1102, length.out = 101 )
seq(1102, length.out = 110 )
seq(1212, length.out = 110 )
seq(1322, length.out = 110 )
seq(1322, length.out = 107 )
seq(2001, length.out = 82 )
seq(2082, length.out = 88 )
seq(2170, length.out = 88 )
seq(2258, length.out = 87 )
seq(2258, length.out = 22 )
seq(2001, length.out = 82 )
seq(3001, length.out = 90 )
seq(3091, length.out = 88 )
seq(3179, length.out = 88 )
seq(5144, length.out = 132 )
seq(5276, length.out = 132 )
seq(5408, length.out = 143 )
require(tidyverse)
x <- 1:5
combn(x, 2)
combn(x, 23)
combn(x, 5)
combn(x, 1)
combn(1:5, 1)
choose(5, 23)
library(tidyverse)
combined.df <- readRDS("~/Github/vedic/vedic_sandbox/results/combined.df.RDS")
View(combined.df)
sents.v <- combined.df$sentence_id %>%
unique()
parent.holder.v <- NULL
i <- 100
a <- combined.df %>%
filter(sentence_id == x[n]) # df with rows sentence by sentence
a <- combined.df %>%
filter(sentence_id == x[i]) # df with rows sentence by sentence
a <- combined.df %>%
filter(sentence_id == sents.v[i]) # df with rows sentence by sentence
b <- as.numeric(a$head_token_id) # vector with head_token_id for each row in sentence
b[which(b == 0)] <- NA # eliminate any head_token_id with value 0
c(parent_holder.v,  a$term_id[b] %>%
as.numeric() ) # add parent term_token_id values for current sentence to vector
a$term_id[b]
a$GlobalTokenId[b]
i %% 100
i %% 20
i %% 21
i %% 100
i <- 765
i %% 100
print(paste0("completed sentence", i)
}
print(paste0("completed sentence", i) )
print(paste0("completed sentence ", i) )
if( (i %% 100) == 0 ) {
print(paste0("completed sentence ", i) )
}
I <- 2000
if( (i %% 100) == 0 ) {
print(paste0("completed sentence ", i) )
}
print(paste0("completed sentence ", i) )
i <- 2000
if( (i %% 100) == 0 ) {
print(paste0("completed sentence ", i) )
}
parent.holder.v <- NULL
for (i in seq_along(sents.v)) {
a <- combined.df %>%
filter(sentence_id == sents.v[i]) # df with rows sentence by sentence
b <- as.numeric(a$head_token_id) # vector with head_token_id for each row in sentence
b[which(b == 0)] <- NA # eliminate any head_token_id with value 0
parent_holder.v <- c(parent_holder.v,  a$GlobalTokenId[b] %>%
as.numeric() ) # add parent term_token_id values for current sentence to vector
if( (i %% 100) == 0 ) {
print(paste0("completed sentence ", i) )
}
}
parent.holder.v <- NULL
for (i in seq_along(sents.v)) {
a <- combined.df %>%
filter(sentence_id == sents.v[i]) # df with rows sentence by sentence
b <- as.numeric(a$head_token_id) # vector with head_token_id for each row in sentence
b[which(b == 0)] <- NA # eliminate any head_token_id with value 0
parent.holder.v <- c(parent.holder.v,  a$GlobalTokenId[b] %>%
as.numeric() ) # add parent term_token_id values for current sentence to vector
if( (i %% 100) == 0 ) {
print(paste0("completed sentence ", i) )
}
}
combined.df <- add_column(combined.df, Global_parent_id = parent.holder.v, .before = TRUE)
View(a)
View(combined.df)
morphs.v <- readRDS("~/Github/vedic/vedic_sandbox/vars/morphs.RDS")
View(combined.df)
morphs.v
x <- combined.df$global_parent_id
x <- combined.df$Global_parent_id
combined.df$self_POS[x]
combined.df[, "parent_POS"] <- combined.df$self_POS[x]
combined.df[, "parent_rel"] <- combined.df$self_rel[x]
combined.df[, "parent_dd"] <- combined.df$self_dd[x]
combined.df[, "parent_arc_dir"] <- combined.df$self_arc_dir[x]
View(combined.df)
morphs.v %>%
paste0("self_", .)
self_names.v <- morphs.v %>%
paste0("self_", .)
parent_names.v <- morphs.v %>%
paste0("parent_", .)
self_names.v
self_names.v <- self_names.v[-3]
self_names.v
parent_names.v <- parent_names.v[-3]
combined.df[, parent_names.v] <-   combined.df[x, self_names.v]
View(combined.df)
setwd("~/Github/vedic/vedic_sandbox/results")
saveRDS(combined.df, "combined_self_and_parent.RDS")
# find dd cut off for binning
summary(abs(combined.df$self_dd))
# bin the dd
combined.df[, "self_binned_dd"]  <- abs(combined.df$self_dd)
combined.df$self_binned_dd[which(combined.df$self_binned_dd >= 3)] <- "gt_2"
combined.df[, "parent_binned_dd"] <- combined.df$self_binned_dd[combined.df$global_parent_id]
View(combined.df)
x <- combined.df %>% # make vector of col names
colnames()
x
x <- x[str_detect(x, "self_") | str_detect(x, "parent_")] # select all cols with "self" or "parent" in name
x
x <- x[-which(x =="Global_parent_id")]
x
x <- x[-which(x =="self_dd")]
x <- x[-which(x =="parent_dd")]
x <- x[-which(x =="self_Not_App")]
x <- x[-which(x =="parent_Not_App")]
x <- combined.df %>% # make vector of col names
colnames()
x <- x[str_detect(x, "self_") | str_detect(x, "parent_")] # select all cols with "self" or "parent" in name
x <- x[-which(x =="Global_parent_id")]
x <- x[-which(x =="self_dd")]
x <- x[-which(x =="parent_dd")]
x <- x[-which(x =="self_Not_App")]
x
selected.cols.v <- x  # these are the cols for variables
# a loop to make all possible combinations of names in vector of selected cols
selected_vars.list <- vector(mode = "list", 3) # make list to store results
nomina.v <- NULL # vector to store names of list elements
for (k in 1:3) {
selected_vars.list[[k]] <- combn(selected.cols.v, k, simplify = FALSE) # make all possible combinations of variables
nomina.v <- paste(length(selected.cols.v), "Choose",  k, collapse = " ") %>% # create names for elements in list
append(nomina.v, .)
}
selected_vars.list
working.df <-   combined.df[, selected.cols.v] # drop metadata and keep only relevant columns as selected above
working.df <- working.df %>%
filter(!self_POS == "PUNCT") # drop punctuation from consideration
s.v <- sample(1:nrow(working.df), 20000)
sample.df <- working.df[s.v, ]
freq.tib_simplex <- gather(sample.df[,   ], variable_name, variable_value,  na.rm = TRUE) %>%
mutate(combined = paste(paste(variable_name, variable_value, sep = "_Is_"))) %>%
select( combined) %>%
group_by( combined) %>%
summarize(freq = n())  %>%
arrange(desc(freq))
View(freq.tib_simplex)
# extract into separate vectors the variable names for combinations of two morphosyntactic categories
var_1 <- sapply(selected_vars.list[[2]], `[`, 1)
var_2 <- sapply(selected_vars.list[[2]], `[`, 2)
nomen.v <- paste(var_1, var_2, sep = "_And_") # combine simplex variable names into a combined name: e.g, "self_POS_And_self_rel"
View(freq.tib_simplex)
# make matrix to store duplex name-value pairs
r <- nrow(sample.df)
c <- length(nomen.v)
duplex_sample.df <- matrix(ncol = c, nrow = r)
colnames(duplex_sample.df) <- nomen.v
# a loop to populate cols with values; values taken from original sample.df
for (i in seq_along(var_1)) {
duplex_sample.df[, nomen.v[i]] <- paste(unlist(sample.df[, var_1[i]]), unlist(sample.df[, var_2[i] ]), sep = "_And_")
}
duplex_sample.df <- as.data.frame(duplex_sample.df) # convert matrix to data frame (required for next step)
freq.tib_two_plex <- gather(duplex_sample.df[,  ], variable_name, variable_value,  na.rm = TRUE) %>%
mutate(combined = paste(paste(variable_name, variable_value, sep = "_Is_"))) %>%
select( combined) %>%
group_by( combined) %>%
summarize(freq = n())  %>%
arrange(desc(freq))
View(freq.tib_two_plex)
# extract into separate vectors the variable names for combinations of three morpho-syntactic categories
var_1 <- sapply(selected_vars.list[[3]], `[`, 1)
var_2 <- sapply(selected_vars.list[[3]], `[`, 2)
var_3 <- sapply(selected_vars.list[[3]], `[`, 3)
nomen.v <- paste(var_1, var_2, var_3, sep = "_And_")
r <- nrow(sample.df)
c <- length(nomen.v)
triplex_sample.df <- matrix(ncol = c, nrow = r)
colnames(triplex_sample.df) <- nomen.v
for (i in seq_along(var_1)) {
triplex_sample.df[, nomen.v[i]] <- paste( unlist(sample.df[, var_1[i]]), unlist(sample.df[, var_2[i] ]),
unlist(sample.df[, var_3[i] ]),         sep = "_And_")
}
triplex_sample.df <- as.data.frame(triplex_sample.df)
freq.tib_three_plex <- gather(triplex_sample.df[,  ], variable_name, variable_value,  na.rm = TRUE) %>%
mutate(combined = paste(paste(variable_name, variable_value, sep = "_Is_"))) %>%
select( combined) %>%
group_by( combined) %>%
summarize(freq = n())  %>%
arrange(desc(freq))
View(freq.tib_two_plex)
View(triplex_sample.df)
View(freq.tib_three_plex)
freq.tib_simplex <- freq.tib_simplex %>%
filter(!str_detect(combined, "NA"))
freq.tib_two_plex <- freq.tib_two_plex %>%
filter(!str_detect(combined, "NA"))
freq.tib_three_plex <- freq.tib_three_plex %>%
filter(!str_detect(combined, "NA"))
# drop all rows with frequency less than 5% of words
y <- nrow(sample.df)*.05
simplex_vars.tib <- freq.tib_simplex %>%
filter(freq >= y)
View(simplex_vars.tib)
freq.tib_simplex %>%
filter(freq >= y)
freq.tib_two_plex %>%
filter(freq >= y)
freq.tib_two_plex %>%
filter(freq >= y)
freq.tib_three_plex %>%
filter(freq >= y)
two_plex.vars.tib <- freq.tib_two_plex %>%
filter(freq >= y)
three_plex_vars.tib <-  freq.tib_three_plex %>%
filter(freq >= y)
setwd("~/Github/vedic/vedic_sandbox/vars")
setwd("~/Github/vedic/vedic_sandbox/vars/full_RV")
saveRDS(simplex_vars.tib, "simplex_5pc.RDS")
saveRDS(two_plex.vars.tib, "two_plex_5pc.RDS")
saveRDS(three_plex_vars.tib, "three_plex_5pc.RDS")
simplex_vars.tib <- readRDS(file = "simplex_5pc.RDS")
two_tuple_vars.tib <- readRDS(file = "two_plex_5pc.RDS")
three_tuple_vars.tib <- readRDS(file = "three_plex_5pc.RDS")
simplex_comb.l <- simplex_vars.tib$combined %>% #split variable and value and store in list object
str_split("_Is_")
simplex_comb.l
two_comb.l <- two_tuple_vars.tib$combined %>%
str_split("_Is_")
two_comb.l
# split the var name of each list element into component parts and store in new list
# each list element contains a vector with 2 elements
two_var.l <- sapply(two_comb.l, extract, 1) %>% # extract() needs package magrittr
str_split("_And_")
# split the value name of each list element into component parts and store in  new list
# each list element contains a vector with 2 elements
two_val.l <- sapply(two_comb.l, extract, 2) %>%
str_split("_And_")
two_var.l
require(magrittr)
# split the var name of each list element into component parts and store in new list
# each list element contains a vector with 2 elements
two_var.l <- sapply(two_comb.l, extract, 1) %>% # extract() needs package magrittr
str_split("_And_")
# split the value name of each list element into component parts and store in  new list
# each list element contains a vector with 2 elements
two_val.l <- sapply(two_comb.l, extract, 2) %>%
str_split("_And_")
# split variable and value and store in list object
# there is one vector per list element
# the first element of each vector contains var name, the second contains var value
three_comb.l <- three_tuple_vars.tib$combined %>%
str_split("_Are_")
# split the var name of each list element into component parts and store in new list
# each list element contains a vector with 3 elements
three_var.l <- sapply(three_comb.l, extract, 1) %>%
str_split("_And_")
# split the value name of each list element into component parts and store in  new list
# each list element contains a vector with 3 elements
three_val.l <- sapply(three_comb.l, extract, 2) %>%
str_split("_And_")
three_val.l
three_comb.l
two_val.l
three_tuple_vars.tib$combined %>%
str_split("_Are_")
three_tuple_vars.tib$combined
two_val.l
# split variable and value and store in list object
# there is one vector per list element
# the first element of each vector contains var name, the second contains var value
three_comb.l <- three_tuple_vars.tib$combined %>%
str_split("_Is_")
three_comb.l
# split the var name of each list element into component parts and store in new list
# each list element contains a vector with 3 elements
three_var.l <- sapply(three_comb.l, extract, 1) %>%
str_split("_And_")
# split the value name of each list element into component parts and store in  new list
# each list element contains a vector with 3 elements
three_val.l <- sapply(three_comb.l, extract, 2) %>%
str_split("_And_")
three_var.l
three_val.l
####
working.df <- combined.df
target.df <- working.df # create new df
target.df[, simplex_vars.tib$combined ] <- NA
for (j in seq_along(simplex_comb.l)) {
target.df[which(working.df[, simplex_comb.l[[j]][1]  ]  == simplex_comb.l[[j]][2]   ),
simplex_vars.tib$combined[j]   ] <- 1
# which() identifies rows in target in which var column of working.df (working.df[, simplex_comb.l[[j]][1]  ])
# has value required (simplex_comb.l[[j]][2] ); such cells are given value 1
target.df[which(is.na(target.df[, simplex_vars.tib$combined[j] ])), simplex_vars.tib$combined[j]  ] <- 0
# all other cells are given value 0
}
View(target.df)
target.df[, two_tuple_vars.tib$combined ] <- NA
for (j in seq_along(simplex_comb.l)) {
target.df[which(working.df[, simplex_comb.l[[j]][1]  ]  == simplex_comb.l[[j]][2]   ),
simplex_vars.tib$combined[j]   ] <- 1
# which() identifies rows in target in which var column of working.df (working.df[, simplex_comb.l[[j]][1]  ])
# has value required (simplex_comb.l[[j]][2] ); such cells are given value 1
target.df[which(is.na(target.df[, simplex_vars.tib$combined[j] ])), simplex_vars.tib$combined[j]  ] <- 0
# all other cells are given value 0
}
target.df[, 400]
target.df <- working.df # create new df
target.df[, 200]
target.df[, simplex_vars.tib$combined ] <- NA
for (j in seq_along(simplex_comb.l)) {
target.df[which(working.df[, simplex_comb.l[[j]][1]  ]  == simplex_comb.l[[j]][2]   ),
simplex_vars.tib$combined[j]   ] <- 1
# which() identifies rows in target in which var column of working.df (working.df[, simplex_comb.l[[j]][1]  ])
# has value required (simplex_comb.l[[j]][2] ); such cells are given value 1
target.df[which(is.na(target.df[, simplex_vars.tib$combined[j] ])), simplex_vars.tib$combined[j]  ] <- 0
# all other cells are given value 0
}
target.df[, 100]
[which(working.df[, two_var.l[[j]][1] ] == two_val.l[[j]][1] &  working.df[, two_var.l[[j]][2] ]
target.df[, two_tuple_vars.tib$combined ] <- NA
for (j in seq_along(two_var.l)) {
target.df[which(working.df[, two_var.l[[j]][1] ] == two_val.l[[j]][1] &  working.df[, two_var.l[[j]][2] ]
== two_val.l[[j]][2]),           two_tuple_vars.tib$combined[j]] <- 1
# the same process as in j loop above except that it identifies where 2 columns in working.df
# have the two values inticated in two_val.l.
target.df[which(is.na(target.df[, two_tuple_vars.tib$combined[j] ])), two_tuple_vars.tib$combined[j]  ] <- 0
}
target.df[, 101]
target.df[, 201]
target.df[, 301]
target.df[, 401]
target.df[, 406]
target.df[, 407]
target.df[, three_tuple_vars.tib$combined ] <- NA
for (j in seq_along(three_var.l)) {
target.df[which(working.df[, three_var.l[[j]][1] ]  == three_val.l[[j]][1]
& working.df[, three_var.l[[j]][2] ]  == three_val.l[[j]][2]
& working.df[, three_var.l[[j]][3] ]  == three_val.l[[j]][3]
)      , three_tuple_vars.tib$combined[j]    ]  <- 1
# the same process as in j loop above except that it identifies where 3 columns in working.df
# have the 3 values inticated in three_val.l.
target.df[which(is.na(target.df[, three_tuple_vars.tib$combined[j] ])), three_tuple_vars.tib$combined[j]  ] <- 0
}
target.df[, 900]
setwd("~/Github/vedic/vedic_sandbox/results")
saveRDS(target.df, "combined_binary-valued.RDS")
rm(list = ls())
working.df <- readRDS("~/Github/vedic/vedic_sandbox/results/combined_binary-valued.RDS")
require(stylo)
View(working.df)
book.v <- working.df$Book_Id %>% unique()
holder.l <- vector(mode = "list", length(book.v)*3)
nomina.v <- NULL
i <- 1
x <- working.df %>%
filter(Book_Id == book.v[i])
require(caret)
x <- x[, which(str_detect(colnames(x), "_Is_"))]
str_detect(colnames(x), "_Is_")
which(str_detect(colnames(x), "_Is_")== TRUE)
x <- x[, which(str_detect(colnames(x), "_Is_")== TRUE)]
x <- working.df %>%
filter(Book_Id == book.v[i])
x <- x[, which(str_detect(colnames(x), "_Is_")== TRUE)]
x
colnames(x)
createFolds(x, 3)
createFolds(1:nrow(x), 3)
flds <- createFolds(1:nrow(x), 3)
holder.l <- vector(mode = "list", length(book.v))
fold.holder.l <- vector(mode = "list", 3)
j <- 1
x[flds[[j]], ] %>%
colSums()
(x[flds[[j]], ] %>%
colSums() / nrow(x[flds[[j]])
(x[flds[[j]], ] %>%
colSums() / nrow(x[flds[[j]])
nrow(x[flds[[j]])
(x[flds[[j]], ] %>%
colSums() / nrow(x[flds[[j]]) )
x[flds[[j]], ] %>%
colSums()
fold.holder.l[[j]] <- x[flds[[j]], ] %>%
colSums()
fold.holder.l
fold.holder.l[[j]] <-  fold.holder.l[[j]] / nrow(fold.holder.l[[j]])
fold.holder.l
fold.holder.l[[j]] <- x[flds[[j]], ] %>%
colSums()
length(flds)
length(flds[[j]]
length(flds[[j]])
flds[[j]]
length(flds[[j]] )
fold.holder.l[[j]] / length(flds[[j]] )
fold.holder.l[[j]] <-   fold.holder.l[[j]] / length(flds[[j]] )
paste0("book_", i)
paste0("book_", i, "sample_" 1:3)
paste0("book_", i, "sample_", 1:3)
for (i in seq_along(book.v)) {
x <- working.df %>%
filter(Book_Id == book.v[i])
x <- x[, which(str_detect(colnames(x), "_Is_")== TRUE)]
flds <- createFolds(1:nrow(x), 3)
fold.holder.l <- vector(mode = "list", 3)
for (j in seq_along(flds)) {
fold.holder.l[[j]] <- x[flds[[j]], ] %>%
colSums()
fold.holder.l[[j]] <-   fold.holder.l[[j]] / length(flds[[j]] )
}
a <- paste0("book_", i, "sample_", 1:3)
nomina.v <- c(nomina.v, a)
holder.l[[i]] <- fold.holder.l
}
nomina.v
holder.l <- vector(mode = "list", length(book.v))
nomina.v <- NULL
for (i in seq_along(book.v)) {
x <- working.df %>%
filter(Book_Id == book.v[i])
x <- x[, which(str_detect(colnames(x), "_Is_")== TRUE)]
flds <- createFolds(1:nrow(x), 3)
fold.holder.l <- vector(mode = "list", 3)
for (j in seq_along(flds)) {
fold.holder.l[[j]] <- x[flds[[j]], ] %>%
colSums()
fold.holder.l[[j]] <-   fold.holder.l[[j]] / length(flds[[j]] )
}
a <- paste0("book_", i, "_sample_", 1:3)
nomina.v <- c(nomina.v, a)
holder.l[[i]] <- fold.holder.l
}
nomina.v
holder.l
result.df <- do.call(bind_rows, holder.l)
View(result.df)
rownames(result.df) <- nomina.v
View(result.df)
dd <- dist(result.df)
cl <- hclust(dd)
plot(cl)
d <- dist.cosine(result.df)
dc <- dist.cosine(result.df)
dc <- dist.cosine(as.matrix(result.df))
cl <- hclust(dc)
dd <- dist(result.df)
cl <- hclust(dd)
plot(cl)
cl2 <- hclust(dc)
plot(cl2)
