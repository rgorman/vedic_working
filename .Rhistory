degree <- c(4,2,2,1,1,3,1,1,4,3,3,2,2,2,2,2,4,1,1,1,2,1,2,2,1,2,2,1,1)
degree2 <- degree^2
mean(degree2)
29*(28-mean(degree2))
29*(28-mean(degree2))/2
29.28
29*28
29*28 /2
28-mean(degree^2)
(28-mean(degree^2)()
(28-mean(degree^2)
(28-mean(degree^2))
1
(28-mean(degree^2))
29*23.37931
(28-mean(degree^2))/2
29*11.68966
29*(28-mean(degree^2))/2
11/12
10/12
9/12
7/12
factorial(6)
factorial(7)
27/7
27/7
27/7
6*3.857143
6-3.857143
6 *(6-3.857143)
6 *(6-3.857143)
7 *(6-3.857143)
7 *(6-3.857143)/2
26/7
6-3.714286
7*2.285714
34/7
6-4.857143
7*1.142857
1-5
5/20/6
5-20/6
6*1.6666667
factorial(9)
17.5/18
13.5/18
15*12
15*12*250
12*3.2
38*1100
factorial(25)
x <- 1/12
x/452
x/242
x/311
x/180
x/1237
x/982
x/203
x/205
x/996
x/466
x/239
x/210
factorial(20)
factorial(20)
rnorm(10)
exp(1)
exp(1)^-1
1/exp(1)
5e3
log(2)
ls
install.packages("ggplot2")
install.packages("plyr")
install.packages("gapminder")
total <- 62+12+45+6+22
success <- 74/147
W <- 22/147
better_than_d <- 74/147
better_than_c_minus <- 54/147
4+4+9+3+9+7+6+12+8+4+4+8+29+22+12+6+5
62/152
56/152
27/152
62/156
exp(1)
156-62
37/5
78/156
82/156
63/203
75/156
exp(1)
38^.5
u <- c(2, 3, 5)
(u^2)
sum(u^2)
(38^.5)
(38^.5)*u
(1/(38^.5) )*u
nu <- (1/(38^.5) )*u
nu
(nu^2)
sum(nu^2)
nu
exp(1)
require(tidyverse)
exp(1)
k <- 1:10
p <- .025
((1-p))
((1-p)^(k-1))
((1-p)^(k-1))*p
k <- 1:100
p <- .025
((1-p)^(k-1))*p
p <- .975
((1-p)^(k-1))*p
k <- 1:10
p <- .975
((1-p)^(k-1))*p
install.packages("readtext")
system.time()
system.time(rnorm(10^7))
system.time(rnorm(data <- 10^7))
system.time(rnorm(data <- 10^8))
system.time(data <- rnorm(10^8))
a <- 1:10^5
a <- sin(a)
system.time( a <- sin(a) )
a <- 1:10^5
system.time( a <- sin(a) )
a <- 1:10^5
system.time( a <- sin(a) )
a <- 1:10^6
system.time( a <- sin(a) )
a <- 1:10^7
system.time( a <- sin(a) )
.8*.25
.2/.5
.2/.25
.75*.8
.2*.25
.2*.75
.2/.8
log2(0.25)
.8*.25
log2(1)
.2/(.8*.5)
log2(.5)
.4/.5
log2(.8)
x <- 75
(120-x)/120
x <- 2
(120-x)/120
x <- 20
(120-x)/120
x <- 14
(120-x)/120
x <- 68
(120-x)/120
x <- 13
(120-x)/120
x <- 27
(120-x)/120
x <- 58
(120-x)/120
x <- 23
(120-x)/120
x <- 33
(120-x)/120
x <- 6
(120-x)/120
(1-.75^(1-.75))
.75*(1-.75^(1-.75))
.75*(1-.75^(1-1))
(1-.75^(1-1))
y <- 1
.75^y
(1-.75)^(1-y)
(.75^y)*(1-.75)^(1-y)
y <- 0
(.75^y)*(1-.75)^(1-y)
log(.75)
log(.25)
(.99^y)*(1-.99)^(1-y)
log(.01)
y <- 1
(.99^y)*(1-.99)^(1-y)
log(.99)
-log(.99)
-log(.7)
-log(.3)
-log(.9999)
-log(.0001)
y <- 0
(.99^y)*(1-.99)^(1-y)
(.001^y)*(1-..001)^(1-y)
(.001^y)*(1-.001)^(1-y)
y <- 0
(.001^y)*(1-.001)^(1-y)
-log(.999)
y <- 1
(.001^y)*(1-.001)^(1-y)
-log(.001)
exp()
exp()
exp(1)
setwd("~/git hub/vedic_working")
require(xlsx)
require(tidyverse)
conllu.df <- read.xlsx("online_processed.conllu.xlsx")
conllu.df <- read.xlsx("online_processed.conllu.xlsx", sheetIndex = 1)
View(conllu.df)
x.df <- readRDS("~/git hub/vedic_working/online_processed_test.RDS")
View(x.df)
conllu.df <- readRDS("online_processed_test.RDS")
rm(x.df)
require(udpipe)
setwd("~/git hub/Hellwig/sanskrit/papers/2020lrec/treebank")
x <-  udpipe_read_conllu("sanskrit.conllu")
View(x)
setwd("~/git hub/vedic_working")
write.xlsx(x[1:100, ], file = "ModelOfConllu.xlsx")
x <-  udpipe_read_conllu("processed.conllu")
View(x)
working.df <- x
z <- working.df$feats %>%
str_split(., "\\|", simplify = TRUE) # make a matrix of each name-value pair in the "feats" col of the input (e.g., "Case=Nom")
m <- ncol(z) # for loop: number of cols in z
morphs.v <- NULL # vector to store results of loop
for (j in seq_len(m)) { # loop through cols of z
a <- z[, j] %>%
str_split(., "=") %>% # split name from value for each pair
sapply(., magrittr::extract, 1) # extract and keep only names, not values
morphs.v <- c(morphs.v, a) # put results in vector
b <- z[, j] %>%
str_split(., "=") %>% # split name from value for each pair
sapply(., magrittr::extract, 2) # extract and keep only vales, not names
}
morphs.v <-  unique(morphs.v) # remove duplicates
morphs.v <- morphs.v[- which(morphs.v == "")] # remove empty categories
morphs.v[which(is.na(morphs.v))] <- "Not_App" # rename NA: this is not an acceptable name for a col
working.df[, morphs.v] <- NA # add "self-" cols for morphology
View(working.df)
z <- working.df$feats %>%
str_split(., "\\|", simplify = TRUE) # make a matrix of each name-value pair in the "feats" col of the input (e.g., "Case=Nom")
View(z)
z[which(z == "")] <- "Not_App"
z[is.na(z)] <- "Not_App"
j <- 1
apply(z[, j, drop=F], 1,   function(x) sub(".*=", "", x)    )
a <- apply(z[, j, drop=F], 1,   function(x) sub(".*=", "", x)    )
b <- apply(z[, j, drop=F], 1,   function(x) sub("=.*", "", x)    )
for (n in seq_along(a)) {
working.df[n, b[n]] <- a[n]
}
View(working.df)
for (j in seq_len(ncol(z))) {
a <- apply(z[, j, drop=F], 1,   function(x) sub(".*=", "", x)    )
b <- apply(z[, j, drop=F], 1,   function(x) sub("=.*", "", x)    )
#b <- paste0("self_", b)
for (n in seq_along(a)) {
working.df[n, b[n]] <- a[n]
}
}
saveRDS(working.df,file = "formatted_online_parse.RDS")
